gurdy:
    # Publish all joint states -----------------------------------
    joint_state_controller:
      type: joint_state_controller/JointStateController
      publish_rate: 50
    
    #Parameterization of variables using YAML Merge Keys
    pid: &values {p: 3, i: 1, d: 0} 

    # Position Controllers ---------------------------------------
    head_upperlegM1_joint_position_controller:
      type: effort_controllers/JointPositionController  # We send a position command to the joints, and this controller implements PID control to generate the desired effort and hence velocity to reach that specific position. If the PID parameters are too large we can overshoot...
      joint: head_upperlegM1_joint
      pid: *values
      #pid: {p: *p, i: *i, d: *d}
    head_upperlegM2_joint_position_controller:
      type: effort_controllers/JointPositionController
      joint: head_upperlegM2_joint
      pid: *values
    head_upperlegM3_joint_position_controller:
      type: effort_controllers/JointPositionController
      joint: head_upperlegM3_joint
      pid: *values

    z_rotary_M1_joint_position_controller:
      type: effort_controllers/JointPositionController
      joint: z_rotary_M1_joint
      pid: *values
    z_rotary_M2_joint_position_controller:
      type: effort_controllers/JointPositionController
      joint: z_rotary_M2_joint
      pid: *values
    z_rotary_M3_joint_position_controller:
      type: effort_controllers/JointPositionController
      joint: z_rotary_M3_joint
      pid: *values

    upperlegM1_lowerlegM1_joint_position_controller:
      type: effort_controllers/JointPositionController
      joint: upperlegM1_lowerlegM1_joint
      pid: *values
    upperlegM2_lowerlegM2_joint_position_controller:
      type: effort_controllers/JointPositionController
      joint: upperlegM2_lowerlegM2_joint
      pid: *values
    upperlegM3_lowerlegM3_joint_position_controller:
      type: effort_controllers/JointPositionController
      joint: upperlegM3_lowerlegM3_joint
      pid: *values
